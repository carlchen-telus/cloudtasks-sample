echo "# cloudtasks-sample" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:carlchen-telus/cloudtasks-sample.git
git push -u origin master
===========================================
 git branch --set-upstream-to=origin/master master
 git pull --allow-unrelated-histories
 git pull origin master
 ================
 docker build --no-cache -t gkeappdemo .
 docker run -it --rm -p 8080:8080 gkeappdemo
 ==============
 gcloud auth login
 gcloud projects list
 gcloud config list
 gcloud config set project level-amphora-275105
 ============Create Cloud Task
 gcloud tasks queues create [QUEUE_ID]
 gcloud tasks queues describe [QUEUE_ID]
 =============Create Cloud SQL
 gcloud sql instances create synccloudtasks-instance --zone=us-west4-a
 gcloud sql databases create syncloudtasks --instance synccloudtasks-instance
 gcloud sql instances describe synccloudtasks-instance |grep connectionName
 
 database view current connections: show processlist;
 ==============Create GKE Clouster
 gcloud container clusters create cloudtask-sample --num-nodes=3 --region=us-west4-a --scopes=cloud-platform # cloud-platform scope allows cluster access to cloudtask
 gcloud config set container/cluster cloudtask-sample
 ==============build GCP image in container registery
 gcloud builds submit --tag=gcr.io/level-amphora-275105/gkeappdemo:v1 . 
 gcloud container images list
 =============Deprecated==Create GKE deployment and service (not use yaml)
 kubectl create deployment cloudsample-deployment  --image=gcr.io/level-amphora-275105/gkeappdemo:v1 # changed to use deployment.yaml
 kubectl get pods
 kubectl describe pod <pod-name>
 kubectl expose deployment cloudsample-deployment --name=cloudtasksample-service --type=LoadBalancer --port 80 --target-port 8080 #use yaml deployment-ingress
 kubectl get service
 kubectl describe deployments
 ====================
 Option 1: Load Balance to Cluster IP
 Deploy application:
 kubectl apply -f deployment.yaml
 
 Create an LoadBalancer
 kubectl apply -f deployment-balancer.yaml
 
 Option 2: GKE Ingress for HTTP(S) Load Balancing
 - Deploy application:
 kubectl apply -f deployment.yaml
 - Expose Deployment as a Service internally
 kubectl apply -f deployment-service.yaml
 kubectl get service cloudsample-service # retrieve the node port 
 NAME                  TYPE       CLUSTER-IP    EXTERNAL-IP   PORT(S)          AGE
cloudsample-service   NodePort   10.40.2.129   <none>        8080:31989/TCP   9s
- Create an Ingress resource
kubectl apply -f deployment-ingress.yaml
make sure the application path "/" return 200 for ingress to do health check. 

 ============ Update GKE with new version
 gcloud builds submit --tag=gcr.io/level-amphora-275105/gkeappdemo:v2 .
$ kubectl set image deployment/cloudsample-deployment cloudsample=gcr.io/level-amphora-275105/gkeappdemo:v10 #gkeappdemo is container name
$ kubectl get service

====
curl http://34.125.225.87/task/1

curl -d '{"source":"source", "target":"target", "targetUrl":"http://localhost:8080", "referenceId":"referenceId", "referenceType":"referenceType", "syncId":"syncId", "status":"NEW", "requestMessage":"{\"requestMessage\":\"test\"}", "createUser":"createUser", "operationName":"operationName", "transactionId":"transactionId"}' -H 'Content-Type: application/json' http://34.125.14.42/task
Invoke-WebRequest "http://34.125.14.42/createTask" -Method POST -Headers @{"Content-Type" = "application/json"} -body @{"source":"source", "target":"target", "targetUrl":"http://localhost:8080", "referenceId":"referenceId", "referenceType":"referenceType", "syncId":"syncId", "status":"NEW", "requestMessage":"{\"requestMessage\":\"test\"}", "createUser":"createUser", "operationName":"operationName", "transactionId":"transactionId"}

==============Spring boot environement configuration 
Add Environment Variable in Eclipse Run Configuration:
GOOGLE_APPLICATION_CREDENTIALS = [service account.json file location]
SPRING_CLOUD_GCP_LOGGING_PROJECT_ID =[gcp project id]

====================CloudSQLConnecting from Google Kubernetes Engine
create Cloud proxy
create service account with permission:Cloud SQL Client, Cloud SQL Editor, Cloud SQL Admin
cloud_sql_proxy -instances=level-amphora-275105:us-west4:synccloudtasks-instance=tcp:1433 -credential_file C:\Users\t835630\git\repository\cloudtasks-sample\MyFirstProject-a6aa03f03237.json

cloud_sql_proxy -instances=level-amphora-275105:us-west4:cloudtaskdb=tcp:1433 -credential_file C:\Users\t835630\git\repository\cloudtasks-sample\MyFirstProject-a6aa03f03237.json
================== add environment variable
gcloud composer environments update test-environment 
   --location us-west4 
   --update-env-variables=SPRING_CLOUD_GCP_LOGGING_PROJECT_ID=[gcp project id],LOCATION_ID=[],QUEUE_ID=[queue],TARGET_URL=[url]


=======================
Connecting from Google Kubernetes Engine
https://cloud.google.com/sql/docs/mysql/connect-kubernetes-engine

Enable Workload Identity on an existing cluster
gcloud container clusters update  cloudtasksample --workload-pool=level-amphora-275105.svc.id.goog  --zone=us-west4-a

Connect to the K8S cluster
gcloud container clusters get-credentials cloudtasksample --zone us-west4-a --project level-amphora-275105

kubectl get namespace


Connecting using the Cloud SQL Proxy
- Create a KSA for your application kubectl apply -f service-account.yaml
	apiVersion: v1
	kind: ServiceAccount
	metadata:
	  name: cloudsampleksa 
  
- Enable the IAM binding between your YOUR-GSA-NAME and YOUR-KSA-NAME
gcloud iam service-accounts add-iam-policy-binding --role roles/iam.workloadIdentityUser --member "serviceAccount:level-amphora-275105.svc.id.goog[default/cloudsampleksa]" cloudsampleapp@level-amphora-275105.iam.gserviceaccount.com 

- Add an annotation to YOUR-KSA-NAME to complete the binding
kubectl annotate serviceaccount cloudsampleksa iam.gke.io/gcp-service-account=cloudsampleapp@level-amphora-275105.iam.gserviceaccount.com
- Finally, make sure to specify the service account for the k8s object.
...
emplate:
    metadata:
      labels:
        app: cloudsample
    spec:
      serviceAccountName: cloudsampleksa
...
 
- Run the Cloud SQL proxy as a sidecar
kubectl apply -f deployment.yaml

==== secret

echo -n 'jiquan.chen@gmail.com' | base64
echo -n '^3wEbV9Qr' | base64

kubectl apply -f secret.yaml

=====Configuring HTTPS to a Web Service on Google Kubernetes Engine
https://estl.tech/configuring-https-to-a-web-service-on-google-kubernetes-engine-2d71849520d

keytool -genkey -keyalg RSA -alias cloudsample -keystore selfsigned.jks -validity 10000 -keysize 2048
password : ^3wEbV9Qr
keytool -importkeystore -srckeystore selfsigned.jks -destkeystore selfsigned.jks -deststoretype pkcs12

https://serverfault.com/questions/715827/how-to-generate-key-and-crt-file-from-jks-file-for-httpd-apache-server
https://docs.cloudera.com/documentation/enterprise/6/6.1/topics/cm_sg_openssl_jks.html


=======PostgreSQL==========

